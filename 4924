考

pip install

Zencoding

Written test

Flask(forms,template

Write method,cookie

Zencoding

Git branching

Docker

Database 

Php,login

debug mode:instant update when changing files,more information in log

Diff merge = compare different(Google search)

Not done

Ask git push location,.j2 file color

lecture

sql:先left join ,再inner join(upper left ) 唔得就flip the name

html 可以用alert debug

inside 大bracket : python code

In cloud run XXS,no docker 

git diff in different repo,1234567 as branch first 7 number

git remote add A https://github.com/wongcyrus/microblog.git

git fetch A

git diff 1234567 1234567  

git diff in same repo

git diff 1234567 1234567  

# ea_assignment_hint_B cloud9

show hidden file

git clone https://github.com/kitson618/ea_assignment_hint_B.git 

create/change new beanch to main

Change name:

mv ea_assignment_hint_B your_project_name   

rm -rf .git

git init 

git add -A

git commit -m “your comment”

git remote add (remote name) (git_url)

git push (remote name) master     (#use gitthub token as password,e.g:)

if not work

change barnch in down left corner

git branch -f master main

reload cloud9 website

git pull --rebase (remote name) master

python3 -m venv venv

chmod 777 ./venv/bin/activate

./venv/bin/activate

pip install -r requirements.txt

pip install sqlite-web

create setup.sh

copy to open ports:

security_group=$(ec2-metadata -s | cut -d " " -f 2);
aws ec2 authorize-security-group-ingress --group-name $security_group --protocol tcp --port 80 --cidr 0.0.0.0/0
aws ec2 authorize-security-group-ingress --group-name $security_group --protocol tcp --port 8080 --cidr 0.0.0.0/0
aws ec2 authorize-security-group-ingress --group-name $security_group --protocol tcp --port 8000 --cidr 0.0.0.0/0

EA ver(if not work try this):

security_group=$(ec2-metadata -s | cut -d " " -f 2);
aws ec2 authorize-security-group-ingress --group-name $security_group --protocol tcp --port 5000 --cidr 0.0.0.0/0
aws ec2 authorize-security-group-ingress --group-name $security_group --protocol tcp --port 8000 --cidr 0.0.0.0/0

chmod 755 setup.sh

./setup.sh

Create get_preview_link.sh and chmod and run like setup.sh

ip=$(curl http://checkip.amazonaws.com)

echo "Preview URL"

echo "http://$ip:8080"echo "SQLite DB Web URL"

echo "http://$ip:8000"

EA ver(if not work try this):

ip=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
echo "Preview URL"
echo "http://:5000$ip"
echo "SQLite DB Web URL"
echo "http://:8000$ip"

chmod 755 get_preview_link.sh

./get_preview_link.sh

Create admin account, followed by executing the application

fabmanager create-admin

fabmanager run

SQlite 

open new terminal and go to the location

. venv/bin/activate

pip install sqlite-web 

Get host name of your Cloud9 instance type: 

hostname

sqlite_web -p 8000 -H (hostname) app.db 

Go to http://server_ip:8000/            (#server_ip from running get_preview_link.sh)

Cloud9 disk grow size

df -hT       (#check size)

sudo lsblk    (#check volume)

sudo growpart /dev/xvda 1

sudo xfs_growfs -d /

# change tmp folder to solve not enough space problem in cloud 9

https://blog.csdn.net/comli_cn/article/details/127641145

# lab 15 step

step1

sudo docker build -t microblog:latest .     (#build docker image on current folder,must create docker compose first)

step 2 push docker image

export DOCKERID=<your docker id>

echo $DOCKERID  (#check docker id you have set)

sudo docker login

sudo docker tag microblog:latest $DOCKERID/microblog:latest   (#retag local image)

sudo docker image push $DOCKERID/microblog:latest

check docker image on https://hub.docker.com/r/rwong722

step3 download docker image

sudo docker pull rwong722/microblog:latest

sudo docker images   (#list docker image)

change the file path in docker-compose(e.g:image: rwong722/microblog)

sudo docker swarm init

change docker compose

```
networks:
  flask_app:
    external:
      name: flask_app
```

docker network create -d overlay (network name in docker compose,e.g:flask_app)

sudo docker stack deploy -c docker-compose.yml microblogstack

sudo docker stack ps microblogstack

sudo docker ps

                        

flask lab

pip freeze > requirements.txt

pip install flask

pip install -U Flask-SQLAlchemy

pip install Flask-Migrate

pip install email_validator

pip install flask-login

Build up different database from models.py:

pip install flask_migrate

pip install  flask-wtf

pip install psycopg2

email and encryption:

pip install flask-mail

pip install PyJWT==2.3.0    (#encode and decode JSON Web Tokens)

pip install aiosmtpd     (#SMTP server use Asyncio(not sync input and output))

pip install flask-bootstrap       (#blueprint stuff)

pip install flask-moment

pip install flask-babel==2.0.0

If [model.py](http://model.py) updated,run:

generate a migration class Posts table:flask db migrate -m “Posts table”

apply migration to database.flask db upgrade #python -> sql

create a migration repo:flask db init

Replicated:specify the number of identical tasks you want to run 

Global:runs one task on every node

![image.png](attachment:5e2696ce-3e8b-4e3c-821d-554c755c0b79:image.png)

docker command

python3 -m venv venv  (#Create Python 3 virtual environment )

. venv/bin/activate   (#Activate virtual environment)

pip3 install -r requirements.txt

sudo yum install -y docker 

cd ~/environment/microblog/

sudo docker build -t microblog:latest .

export DOCKERID=<your docker id>    (#set environment variable)

sudo docker login

sudo docker tag microblog:latest $DOCKERID/microblog:latest  (#retag local image)

sudo docker image push $DOCKERID/microblog:latest

sudo docker rmi microblog:latest   (#remove docker image in local)

sudo docker pull <other classmate’s docker id>/<repository>:<tag>,e.g:docker pull kitson618c/microblog:latest

sudo docker images     (#check images)

sudo docker swarm init

sudo docker stack deploy -c docker-compose.yml microblogstack  (#run again when docker-compose.yml change)

sudo docker stack ps microblogstack  (#check what is running in  the container)

docker service logs -f (head 2 letter of container)  

clean up:

sudo docker ps (-a)  (#check all process)

sudo docker stack rm microblogstack  (#remove stack)

sudo docker swarm leave --force

forms.py

```python
from flask import Flask, render_template
app = Flask(__name__)

@app.route ("/")
def home():
	return render_template('index.html')
	
if __name__ == '__main__':
	 app.run(debug=True) 
```

After run above code,flask application will redirect to error.html.js request is not defined,fix by adding “import request” to first line

```python
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, BooleanField, SubmitField, \
TextAreaField
from wtforms.validators import ValidationError, DataRequired, Email, EqualTo, \
Length
from flask_babel import _, lazy_gettext as _l
from app.models import User

class LoginForm(FlaskForm):
username = StringField(_l('Username'), validators=[DataRequired()])
password = PasswordField(_l('Password'), validators=[DataRequired()])
remember_me = BooleanField(_l('Remember Me'))
submit = SubmitField(_l('Sign In'))
```

routes.py

```python
from datetime import datetime
from flask import render_template, flash, redirect, url_for, request, g
from flask_login import login_user, logout_user, current_user, login_required
from werkzeug.urls import url_parse
from flask_babel import _, get_locale
from app import app, db
from app.forms import LoginForm, RegistrationForm, EditProfileForm, PostForm, \
ResetPasswordRequestForm, ResetPasswordForm
from app.models import User, Post
from app.email import send_password_reset_email

@app.before_request
def before_request():
if current_user.is_authenticated:
current_user.last_seen = datetime.utcnow()
db.session.commit()
g.locale = str(get_locale())

@app.route('/', methods=['GET', 'POST'])
@app.route('/index', methods=['GET', 'POST'])
@login_required

…

@app.errorhandler(404)
def page_not_found(err):
return "Pages Not Found: " + request.path

```

models.py(database)

```python
from app import db

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text)
    email = db.Column(db.String(120), index=True, unique=True)
    posts = db.relationship('Post', backref='author', lazy='dynamic')
```

unique index:index=True, unique=True

Index the stuff which always search(e g:email,username)

?backref? ,write post.author will find user,only user find post

mutual backref e.g:

![image.png](attachment:3d222bad-5aeb-4d95-ace3-f8144df6c072:image.png)

config.py

```python
import os

basedir = os.path.abspath(os.path.dirname(__file__))

class Config(object):
    SECRET_KEY = os.environ.get("SECRET_KEY") or "you-will-never-guess"
    SQLALCHEMY_DATABASE_URI = os.environ.get("SQLALCHEMY_DATABASE_URI") or \
        'postgresql://postgres:postgres@postgresdb:5432/postgres'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    MAIL_SERVER = os.environ.get('MAIL_SERVER') or "mailhog"
    MAIL_PORT = int(os.environ.get('MAIL_PORT') or 1025)
    MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS') is not None
    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')
    MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')
    ADMINS = ['cywong@example.com']
    POSTS_PER_PAGE = 3
    LANGUAGES = ['en', 'es', 'zh']
```

SMTP Server address, SMTP Server Port, Sender username, Sender password, Using SSL as encryption method :
MAIL_SERVER
MAIL_PORT
MAIL_USE_SSL
MAIL_USERNAME
MAIL_PASSWORD

j2 html

```
<form action="" method="post" novalidate>
        <p>
            <!-- (i) Label for the email field -->
            <label for="email">{{ _('Email') }}</label><br>
            <!-- (ii) Text field of size 64 for the email -->
            <input type="text" name="email" id="email" size="64"><br>
            <!-- (iii) Output all error messages using a loop -->
            {% for error in form.email.errors %}
                <span style="color: red;">[{{ error }}]</span>
            {% endfor %}
        </p>
        
        <p>
            <!-- (iv) Submit button -->
            <button type="submit">{{ _('Submit') }}</button>
        </p>
    </form>
```

label for the email field inside (i).
text field of size 64 for the email inside (ii).
outputs all the error messages using loop of the email field inside (iii).
submit button inside (iv).

(docker,database command)

Theory

sets up flask debug mode through environment variable:export FLASK_DEBUG=1

|  | POST | GET |
| --- | --- | --- |
| caching | NO | YES |
| no length limit | YES | NO |

POST : Sends data to a specific URI
GET : Requests data at a specific URI
PUT : Puts a file or resource at a specific URI / Sends data to a specific URI to create / update a resource

Cookie is **stored on a client’s computer** in the form of a **text file**. Its purpose is to
**remember** and **track data** pertaining to a client’s usage for better **visitor experience** and **site
statistics**

store in cookie 

key:“cna “,value:“cdca114115” ,only available via HTTPS, expire in 2 days,not allow to set the expire value

set_cookie(“cna”, value=”cdca114115”,max_age=172800, secure=True)

maxage use secound,s secure=True for only available via HTTPS

delete cookie:set_cookie(“cna”, value=”cdca114115”,max_age=0, secure=True)

Bootstrap

col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2 offset-xl-1

the number follow the graph below

![image.png](attachment:6a25ef84-ef88-4f4d-8d23-9e5c65b7b7cc:image.png)

```html
<body>

    <div class="container-field">
        <div class="row">
            <div class="col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2 offset-xl-1">
                <div class="d-none d-xl-block ">Extra Large Device 1</div> 
                <div class="d-none d-lg-block d-xl-none ">Large Device 1</div>
                <div class="d-none d-md-block d-lg-none ">Medium Device 1</div>
                <div class="d-none d-sm-block d-md-none">Small Device 1</div>
                <div class="d-none d-sm-none ">Extra small 1</div>
```

d-none = hidden in any size

d-xx-none = hidden in xx size

```html
           <div class="col-sm-12 col-md-4">
                <div class="card">
                    <div class="card-header bg-danger">Highlights of the Week</div>
                    <div class="card-block">
                        ..... <br> ..... <br>
                    </div>
                </div>
            </div>
            <div class="col-sm-12 col-md-8">
                <div class="card">
                    <div class="card-header bg-primary">Products</div>
                    <div class="card-block">
```

when medium or ≥medium size,keep Highlights of the Week/Products ratio = (4/12) / (8/12)

git

git init microblog   (#create new local repo named microblog)

git add –A    (move all file to staging,middle area before next commit)

git commit –m “Initial version”    (comment with Initial version)

git merge branchName: merge branchName to now selected branch

git rebase branchName:merge now selected branch to branchName

git rebase main bugFix:rebase main to bugFix(commit after bugFix)

git rebase -i hashOrBranchName: use GUI,create new branch and select it

git checkout -b branchName (optional:hash) :create branchName branch and select it

git checkout nowSelectedHash:detach head

git checkout headOrHashOrBranchName~1:change headOrHashOrBranchName become one version before

git branch -f branchName headOrHashOrBranchName:change branchName to headOrHashOrBranchName

git reset headOrHashOrBranchName: only local use 

git revert:make new commit ON THE HEAD BRANCH,so use checkout first.Can use in github like cloud environment

git cherry-pick Hash (optional:hash):copy stuff from another branch,cannot use in same branch

git tag tagName (optional:headOrHashOrBranchName):give tag name to headOrHashOrBranchName, if not specify use head location

git describe (optional:headOrHashOrBranchName):describe headOrHashOrBranchName, if not specify use head location

git commit —amend:open  new branch(horizonatel) based on head

git checkout headOrHashOrBranchName^2:head go to headOrHashOrBranchName’s left side branch or right side branch

git clone:copy local file to make a remote repository

git fetch:copy romote to local

git pull: git fetch + git merge 

git pull --rebase: git fetch + git rebase

git push : sync remote branch from local,require have remote first

git checkout -b totallyNotMain o/main OR  git branch -u o/main totallyNotMain :set totallyNotMain track o/main

git push origin main:sync o/main from main

git fetch origin hash:localBranchName

git push origin :foo :delete o/foo in local and foo in remote(use fetch or pull for reverse)

normal branching:commit → checkout the original →commit again

only on practice

git fakeTeamwork (optional:branchName) (optional:numberOfCommit):git commit on remote 

python

要落init, def __init__,underscore is  for internal use(class),no underscore for outside use(input),e.g:

class functionName(object):
     def **init**(self, var1: int):
         self.var1 = var1

#method have parent method
class Equilateral(Triangle):

        angle=60

def **init**(self):
     super().**init**(self.angle, self.angle, self.angle)

#create instance
my_triangle = Triangle(90, 30, 60)

#use instance
print(my_triangle.number_of_sides)
print(my_triangle.check_angles())

Zencoding

https://www.youtube.com/watch?v=WqpIThWDavQ

from outside to inside

class use .

id use #

e.g div.header>div#logo+ul#name>li.item*3

Outcome:

```
<div class="header">
    <div id="logo"></div>
    <ul id="name">
        <li class="item"></li>
        <li class="item"></li>
        <li class="item"></li>
    </ul>
</div>
```

e.g2:ol.gallery>(li>a[src="img/image$.png"][alt="Image $"])*6

```html
<ol class="gallery">
    <li><a href="" src="img/image1.png" alt="Image 1"></a></li>
    <li><a href="" src="img/image2.png" alt="Image 2"></a></li>
    <li><a href="" src="img/image3.png" alt="Image 3"></a></li>
    <li><a href="" src="img/image4.png" alt="Image 4"></a></li>
    <li><a href="" src="img/image5.png" alt="Image 5"></a></li>
    <li><a href="" src="img/image6.png" alt="Image 6"></a></li>
</ol>

```

CA

default database

hostname:postgresdb

other:postgres

user 

user credit

demo 跟分數位

versiin control

github merge

demo video 要開cam

change stuff:database→model→form→route→template

0.add database,install sqlite-web

1.make a loop slot with multible language 

__init.py__  def get_locale():位 change to cookie to control language (**Lab13 1.08.40**)

EA problem

docker-compose relica not work

why only mailhog work on on9?
